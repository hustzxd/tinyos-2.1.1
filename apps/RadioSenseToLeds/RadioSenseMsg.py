#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'RadioSenseMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 4

# The Active Message type associated with this message.
AM_TYPE = 7

class RadioSenseMsg(tinyos.message.Message.Message):
    # Create a new RadioSenseMsg of size 4.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=4):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <RadioSenseMsg> \n"
        try:
            s += "  [nx_struct radio_sense_msg 4 7
=0x%x]\n" % (self.get_nx_struct radio_sense_msg 4 7
())
        except:
            pass
        try:
            s += "  [nx_struct radio_sense_msg 4 7
=0x%x]\n" % (self.get_nx_struct radio_sense_msg 4 7
())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: nx_struct radio_sense_msg 4 7

    #   Field type: 
    #   Offset (bits): 0
    #   Size (bits): 
    #

    #
    # Return whether the field 'nx_struct radio_sense_msg 4 7
' is signed (False).
    #
    def isSigned_nx_struct radio_sense_msg 4 7
(self):
        return False
    
    #
    # Return whether the field 'nx_struct radio_sense_msg 4 7
' is an array (False).
    #
    def isArray_nx_struct radio_sense_msg 4 7
(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def offset_nx_struct radio_sense_msg 4 7
(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def offsetBits_nx_struct radio_sense_msg 4 7
(self):
        return 0
    
    #
    # Return the value (as a ) of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def get_nx_struct radio_sense_msg 4 7
(self):
        return self.get(self.offsetBits_nx_struct radio_sense_msg 4 7
(), , 0)
    
    #
    # Set the value of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def set_nx_struct radio_sense_msg 4 7
(self, value):
        self.set(self.offsetBits_nx_struct radio_sense_msg 4 7
(), , value, 0)
    
    #
    # Return the size, in bytes, of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def size_nx_struct radio_sense_msg 4 7
(self):
        return ( / 8)
    
    #
    # Return the size, in bits, of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def sizeBits_nx_struct radio_sense_msg 4 7
(self):
        return 
    
    #
    # Accessor methods for field: nx_struct radio_sense_msg 4 7

    #   Field type: 
    #   Offset (bits): 0
    #   Size (bits): 
    #

    #
    # Return whether the field 'nx_struct radio_sense_msg 4 7
' is signed (False).
    #
    def isSigned_nx_struct radio_sense_msg 4 7
(self):
        return False
    
    #
    # Return whether the field 'nx_struct radio_sense_msg 4 7
' is an array (False).
    #
    def isArray_nx_struct radio_sense_msg 4 7
(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def offset_nx_struct radio_sense_msg 4 7
(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def offsetBits_nx_struct radio_sense_msg 4 7
(self):
        return 0
    
    #
    # Return the value (as a ) of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def get_nx_struct radio_sense_msg 4 7
(self):
        return self.get(self.offsetBits_nx_struct radio_sense_msg 4 7
(), , 0)
    
    #
    # Set the value of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def set_nx_struct radio_sense_msg 4 7
(self, value):
        self.set(self.offsetBits_nx_struct radio_sense_msg 4 7
(), , value, 0)
    
    #
    # Return the size, in bytes, of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def size_nx_struct radio_sense_msg 4 7
(self):
        return ( / 8)
    
    #
    # Return the size, in bits, of the field 'nx_struct radio_sense_msg 4 7
'
    #
    def sizeBits_nx_struct radio_sense_msg 4 7
(self):
        return 
    
